# Generated by Django 2.1.5 on 2019-06-05 22:09

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import filer.fields.image
import taggit_autosuggest.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.FILER_IMAGE_MODEL),
        ('taggit', '0003_taggeditem_add_unique_index'),
    ]

    operations = [
        migrations.CreateModel(
            name='Album',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Наименование альбома')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('year', models.IntegerField(verbose_name='Год выпуска')),
                ('album_type', models.IntegerField(choices=[(0, 'Другое'), (1, 'Электронный'), (2, 'Акустический (c оркестром)'), (3, 'Концертная запись'), (4, 'Сингл'), (5, 'Сборник')], default=0, verbose_name='Тип альбома')),
                ('associated_tags', taggit_autosuggest.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Ассоциированные теги')),
            ],
            options={
                'verbose_name': 'Альбом',
                'verbose_name_plural': 'Альбомы',
            },
        ),
        migrations.CreateModel(
            name='BuyLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.CharField(choices=[('0', 'Lord Of The Lost Online Shop'), ('1', 'iTunes'), ('2', 'Другoе')], default='0', max_length=1, verbose_name='Название площадки')),
                ('url', models.URLField(help_text='Ссылка может быть использована повторно', verbose_name='Ссылка на покупку')),
                ('is_main', models.BooleanField(default=True, verbose_name='Оф. магазин')),
                ('comment', models.CharField(blank=True, help_text='Ссылку можно прокомментировать, если хочется', max_length=255, null=True, verbose_name='Комментарий')),
            ],
            options={
                'verbose_name': 'Ссылка на покупку',
                'verbose_name_plural': 'Ссылки на покупку',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Заголовок')),
                ('anons', models.TextField(blank=True, null=True, verbose_name='Анонс')),
                ('dt', models.DateField(verbose_name='Дата события')),
                ('country', models.CharField(max_length=255, verbose_name='Страна')),
                ('city', models.CharField(max_length=255, verbose_name='Город (местность)')),
                ('club', models.CharField(blank=True, max_length=255, null=True, verbose_name='Клуб')),
                ('is_published', models.BooleanField(default=False, verbose_name='Опубликовано')),
                ('vk_album', models.URLField(blank=True, null=True, verbose_name='Альбом ВК')),
            ],
            options={
                'verbose_name': 'Событие',
                'verbose_name_plural': 'События',
            },
        ),
        migrations.CreateModel(
            name='LotlTeamMember',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_nick', models.CharField(max_length=255, verbose_name='Ник (или имя)')),
                ('comment', models.TextField(blank=True, help_text='Можно прокомментировать, если хочется', null=True, verbose_name='Комментарий')),
                ('is_active', models.BooleanField(default=True, help_text='Можно отметить уже не участвующих членов команды, если вдруг захочется их где-то вывести', verbose_name='Активность')),
            ],
            options={
                'verbose_name': 'Участник команды LOTL-info',
                'verbose_name_plural': 'Участники команды LOTL-info',
            },
        ),
        migrations.CreateModel(
            name='LyricsTranslation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(verbose_name='Текст перевода')),
                ('author', models.CharField(max_length=255, verbose_name='Автор перевода')),
            ],
            options={
                'verbose_name': 'Трек в альбоме',
                'verbose_name_plural': 'Треки в альбоме',
            },
        ),
        migrations.CreateModel(
            name='LyricTranslationLang',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lang_tag', models.CharField(max_length=255, verbose_name='Язык перевода')),
            ],
            options={
                'verbose_name': 'Язык перевода',
                'verbose_name_plural': 'Языки перевода',
            },
        ),
        migrations.CreateModel(
            name='Musician',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Имя')),
                ('real_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Имя')),
                ('role', models.CharField(blank=True, max_length=255, null=True, verbose_name='Роль в группе')),
                ('facebook', models.URLField(blank=True, max_length=255, null=True, verbose_name='Facebook')),
                ('instagram', models.URLField(blank=True, max_length=255, null=True, verbose_name='Facebook')),
                ('info', models.TextField(verbose_name='Инфо')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активный участник')),
                ('associated_tags', taggit_autosuggest.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Ассоциированные теги')),
            ],
            options={
                'verbose_name': 'Участник группы',
                'verbose_name_plural': 'Участники группы',
            },
        ),
        migrations.CreateModel(
            name='MusicianPhoto',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_cover', models.BooleanField(default=False, verbose_name='Основная фотка профиля')),
                ('musician', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lotlinfoarchive.Musician', verbose_name='Музыкант')),
            ],
            options={
                'verbose_name': 'Фотография участника группы',
                'verbose_name_plural': 'Фотографии участника группы',
            },
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author', models.CharField(blank=True, max_length=255, null=True, verbose_name='Автор')),
                ('img', filer.fields.image.FilerImageField(blank=True, help_text='Редактирование параметров картинки в отдельном приложении админки (Filer)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Изображение', to=settings.FILER_IMAGE_MODEL)),
                ('tags', taggit_autosuggest.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Ассоциированные теги')),
            ],
        ),
        migrations.CreateModel(
            name='PhotoEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_cover', models.BooleanField(default=False, verbose_name='Обложка')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lotlinfoarchive.Event', verbose_name='Событие')),
                ('photo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lotlinfoarchive.Photo', verbose_name='Фотография с события')),
            ],
            options={
                'verbose_name': 'Фотография с события',
                'verbose_name_plural': 'Фотографии с события',
            },
        ),
        migrations.CreateModel(
            name='PhotoText',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_cover', models.BooleanField(default=False, verbose_name='Обложка')),
                ('photo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lotlinfoarchive.Photo', verbose_name='Фотография к тексту')),
            ],
            options={
                'verbose_name': 'Фотография к тексту',
                'verbose_name_plural': 'Фотографии к тексту',
            },
        ),
        migrations.CreateModel(
            name='TextMaterial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Заголовок')),
                ('text_short', models.TextField(verbose_name='Анонс')),
                ('text_full', models.TextField(verbose_name='Текст')),
                ('dt_created', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('proof_link', models.URLField(blank=True, help_text='Ссылка на пруф или оригинальный источник', null=True, verbose_name='Пруф')),
                ('is_published', models.BooleanField(default=False, verbose_name='Опубликовано')),
                ('vk_album', models.URLField(blank=True, null=True, verbose_name='Альбом ВК')),
            ],
        ),
        migrations.CreateModel(
            name='Tour',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Наименование тура')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('associated_tags', taggit_autosuggest.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Ассоциированные теги')),
            ],
            options={
                'verbose_name': 'Концертный тур',
                'verbose_name_plural': 'Концертные туры',
            },
        ),
        migrations.CreateModel(
            name='Track',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Наименование песни')),
                ('lyrics', models.TextField(blank=True, null=True, verbose_name='Текст песни')),
                ('duration', models.IntegerField(verbose_name='Длительность (сек.)')),
                ('buy_links', models.ManyToManyField(to='lotlinfoarchive.BuyLink', verbose_name='Ссылки на покупку трека')),
            ],
            options={
                'verbose_name': 'Концертный тур',
                'verbose_name_plural': 'Концертные туры',
            },
        ),
        migrations.CreateModel(
            name='TrackInAlbum',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num', models.IntegerField(verbose_name='№')),
                ('album', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lotlinfoarchive.Album', verbose_name='Альбом')),
                ('track', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lotlinfoarchive.Track', verbose_name='Трек')),
            ],
            options={
                'verbose_name': 'Трек в альбоме',
                'verbose_name_plural': 'Треки в альбоме',
            },
        ),
        migrations.CreateModel(
            name='VideoLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Заголовок')),
                ('dt_published', models.DateTimeField(auto_now_add=True, verbose_name='')),
                ('video_url', models.URLField(verbose_name='URL на ютуб (желательно)')),
                ('author', models.CharField(blank=True, max_length=255, null=True, verbose_name='Автор')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('is_official', models.BooleanField(default=True, verbose_name='Официальный материал')),
                ('category', models.IntegerField(choices=[(0, 'Другое'), (1, 'Клип'), (2, 'TV of the Lost'), (3, 'Концертная запись')], default=0, verbose_name='Категория видео')),
                ('tags', taggit_autosuggest.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Теги')),
            ],
            options={
                'verbose_name': 'Видео-ссылка',
                'verbose_name_plural': 'Видео-ссылки',
            },
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('textmaterial_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='lotlinfoarchive.TextMaterial')),
                ('article_type', models.IntegerField(choices=[(0, 'Другой'), (1, 'Статья'), (2, 'Интервью'), (3, 'Мифилогия'), (4, 'Отчет')], default=0, verbose_name='Тип статьи')),
                ('author', models.CharField(blank=True, max_length=255, null=True, verbose_name='Автор')),
                ('author_link', models.URLField(blank=True, null=True, verbose_name='Ссылка на автора')),
            ],
            options={
                'verbose_name': 'Статья',
                'verbose_name_plural': 'Статьи',
            },
            bases=('lotlinfoarchive.textmaterial',),
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('textmaterial_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='lotlinfoarchive.TextMaterial')),
                ('news_type', models.IntegerField(choices=[(0, 'Другой'), (1, 'Новости группы'), (2, 'Новости соо')], default=0, verbose_name='Тип новости')),
            ],
            options={
                'verbose_name': 'Новость',
                'verbose_name_plural': 'Новости',
            },
            bases=('lotlinfoarchive.textmaterial',),
        ),
        migrations.AddField(
            model_name='track',
            name='official_clip_link',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='lotlinfoarchive.VideoLink', verbose_name='Официальный клип'),
        ),
        migrations.AddField(
            model_name='textmaterial',
            name='photos',
            field=models.ManyToManyField(through='lotlinfoarchive.PhotoText', to='lotlinfoarchive.Photo', verbose_name='Фото к материалу'),
        ),
        migrations.AddField(
            model_name='textmaterial',
            name='tags',
            field=taggit_autosuggest.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Теги'),
        ),
        migrations.AddField(
            model_name='textmaterial',
            name='translator',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='lotlinfoarchive.LotlTeamMember', verbose_name='Переводчик'),
        ),
        migrations.AddField(
            model_name='textmaterial',
            name='videos',
            field=models.ManyToManyField(to='lotlinfoarchive.VideoLink', verbose_name='Видео к материалу'),
        ),
        migrations.AddField(
            model_name='phototext',
            name='text_material',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lotlinfoarchive.TextMaterial', verbose_name='Событие'),
        ),
        migrations.AddField(
            model_name='musicianphoto',
            name='photo',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lotlinfoarchive.Photo', verbose_name='Фотография'),
        ),
        migrations.AddField(
            model_name='musician',
            name='photo',
            field=models.ManyToManyField(blank=True, null=True, through='lotlinfoarchive.MusicianPhoto', to='lotlinfoarchive.Photo', verbose_name='Фотографии'),
        ),
        migrations.AddField(
            model_name='musician',
            name='signature',
            field=filer.fields.image.FilerImageField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Автограф', to=settings.FILER_IMAGE_MODEL),
        ),
        migrations.AddField(
            model_name='lyricstranslation',
            name='lang',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='lotlinfoarchive.LyricTranslationLang', verbose_name='Язык перевода'),
        ),
        migrations.AddField(
            model_name='lyricstranslation',
            name='lotl_team',
            field=models.ForeignKey(blank=True, null=True, on_delete='Участник команды LOTL-info', to='lotlinfoarchive.LotlTeamMember'),
        ),
        migrations.AddField(
            model_name='lyricstranslation',
            name='track',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='lotlinfoarchive.Track', verbose_name='Трек'),
        ),
        migrations.AddField(
            model_name='event',
            name='photos',
            field=models.ManyToManyField(through='lotlinfoarchive.PhotoEvent', to='lotlinfoarchive.Photo', verbose_name='Фото к материалу'),
        ),
        migrations.AddField(
            model_name='event',
            name='tags',
            field=taggit_autosuggest.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Теги'),
        ),
        migrations.AddField(
            model_name='event',
            name='tickets',
            field=models.ManyToManyField(to='lotlinfoarchive.BuyLink', verbose_name='Ссылки на покупку билетов'),
        ),
        migrations.AddField(
            model_name='event',
            name='tour',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='lotlinfoarchive.Tour', verbose_name='Тур'),
        ),
        migrations.AddField(
            model_name='event',
            name='videos',
            field=models.ManyToManyField(to='lotlinfoarchive.VideoLink', verbose_name='Видео к событию'),
        ),
        migrations.AddField(
            model_name='album',
            name='buy_links',
            field=models.ManyToManyField(to='lotlinfoarchive.BuyLink', verbose_name='Ссылки на покупку альбома'),
        ),
        migrations.AddField(
            model_name='album',
            name='tour',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='lotlinfoarchive.Tour', verbose_name='Тур в поддержку альбома'),
        ),
        migrations.AddField(
            model_name='event',
            name='articles',
            field=models.ManyToManyField(to='lotlinfoarchive.Article', verbose_name='Статьи по событию'),
        ),
        migrations.AddField(
            model_name='event',
            name='news',
            field=models.ManyToManyField(to='lotlinfoarchive.News', verbose_name='Новости по событию'),
        ),
    ]
